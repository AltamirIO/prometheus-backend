{"version":3,"sources":["../src/githubCMSAuth.js"],"names":["addGithubCMSAuth","app","oauth2","simpleOauthModule","create","client","id","process","env","OAUTH_CLIENT_ID","secret","OAUTH_CLIENT_SECRET","auth","tokenHost","GIT_HOSTNAME","tokenPath","OAUTH_TOKEN_PATH","authorizePath","OAUTH_AUTHORIZE_PATH","authorizationUri","authorizationCode","authorizeURL","redirect_uri","REDIRECT_URL","scope","SCOPES","state","randomstring","generate","get","req","res","redirect","code","query","options","getToken","error","result","mess","content","console","message","token","accessToken","access_token","provider","script","send"],"mappings":";;;;;;;;;;kBAGwBA,gB;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,gBAAT,CAA0BC,GAA1B,EAA+B;AAC5C,MAAMC,SAASC,sBAAkBC,MAAlB,CAAyB;AACtCC,YAAQ;AACNC,UAAIC,QAAQC,GAAR,CAAYC,eADV;AAENC,cAAQH,QAAQC,GAAR,CAAYG;AAFd,KAD8B;AAKtCC,UAAM;AACJ;AACAC,iBAAWN,QAAQC,GAAR,CAAYM,YAAZ,IAA4B,oBAFnC;AAGJC,iBAAWR,QAAQC,GAAR,CAAYQ,gBAAZ,IAAgC,2BAHvC;AAIJC,qBAAeV,QAAQC,GAAR,CAAYU,oBAAZ,IAAoC;AAJ/C;AALgC,GAAzB,CAAf;;AAaA;AACA,MAAMC,mBAAmBjB,OAAOkB,iBAAP,CAAyBC,YAAzB,CAAsC;AAC7DC,kBAAcf,QAAQC,GAAR,CAAYe,YADmC;AAE7DC,WAAOjB,QAAQC,GAAR,CAAYiB,MAAZ,IAAsB,WAFgC;AAG7DC,WAAOC,uBAAaC,QAAb,CAAsB,EAAtB;AAHsD,GAAtC,CAAzB;;AAMA;AACA;;;AAGA;AACA3B,MAAI4B,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BA,QAAIC,QAAJ,CAAab,gBAAb;AACD,GAFD;;AAIA;AACAlB,MAAI4B,GAAJ,CAAQ,WAAR,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,QAAME,OAAOH,IAAII,KAAJ,CAAUD,IAAvB;AACA,QAAME,UAAU;AACdF,YAAMA;AADQ,KAAhB;;AAIA/B,WAAOkB,iBAAP,CAAyBgB,QAAzB,CAAkCD,OAAlC,EAA2C,UAACE,KAAD,EAAQC,MAAR,EAAmB;AAC5D,UAAIC,aAAJ;AAAA,UAAUC,gBAAV;;AAEA,UAAIH,KAAJ,EAAW;AACTI,gBAAQJ,KAAR,CAAc,oBAAd,EAAoCA,MAAMK,OAA1C;AACAH,eAAO,OAAP;AACAC,kBAAU,yBAAeH,KAAf,CAAV;AACD,OAJD,MAIO;AACL,YAAMM,QAAQzC,OAAO0C,WAAP,CAAmBxC,MAAnB,CAA0BkC,MAA1B,CAAd;AACAC,eAAO,SAAP;AACAC,kBAAU;AACRG,iBAAOA,MAAMA,KAAN,CAAYE,YADX;AAERC,oBAAU;AAFF,SAAV;AAID;;AAED,UAAMC,yQAOwBR,IAPxB,SAOgC,yBAAeC,OAAf,CAPhC,oTAAN;AAiBA,aAAOT,IAAIiB,IAAJ,CAASD,MAAT,CAAP;AACD,KAlCD;AAmCD,GAzCD;;AA2CA9C,MAAI4B,GAAJ,CAAQ,UAAR,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChCA,QAAIiB,IAAJ,CAAS,EAAT;AACD,GAFD;AAGD","file":"githubCMSAuth.js","sourcesContent":["import simpleOauthModule from 'simple-oauth2'\nimport randomstring from 'randomstring'\n\nexport default function addGithubCMSAuth(app) {\n  const oauth2 = simpleOauthModule.create({\n    client: {\n      id: process.env.OAUTH_CLIENT_ID,\n      secret: process.env.OAUTH_CLIENT_SECRET\n    },\n    auth: {\n      // Supply GIT_HOSTNAME for enterprise github installs.\n      tokenHost: process.env.GIT_HOSTNAME || 'https://github.com',\n      tokenPath: process.env.OAUTH_TOKEN_PATH || '/login/oauth/access_token',\n      authorizePath: process.env.OAUTH_AUTHORIZE_PATH || '/login/oauth/authorize'\n    }\n  })\n\n  // Authorization uri definition\n  const authorizationUri = oauth2.authorizationCode.authorizeURL({\n    redirect_uri: process.env.REDIRECT_URL,\n    scope: process.env.SCOPES || 'repo,user',\n    state: randomstring.generate(32)\n  })\n\n  // Server any static files\n  // app.use(express.static('public'))\n\n\n  // Initial page redirecting to Github\n  app.get('/auth', (req, res) => {\n    res.redirect(authorizationUri)\n  })\n\n  // Callback service parsing the authorization token and asking for the access token\n  app.get('/callback', (req, res) => {\n    const code = req.query.code\n    const options = {\n      code: code\n    }\n\n    oauth2.authorizationCode.getToken(options, (error, result) => {\n      let mess, content\n\n      if (error) {\n        console.error('Access Token Error', error.message)\n        mess = 'error'\n        content = JSON.stringify(error)\n      } else {\n        const token = oauth2.accessToken.create(result)\n        mess = 'success'\n        content = {\n          token: token.token.access_token,\n          provider: 'github'\n        }\n      }\n\n      const script = `\n      <script>\n      (function() {\n        function recieveMessage(e) {\n          console.log(\"recieveMessage %o\", e)\n          // send message to main window with da app\n          window.opener.postMessage(\n            'authorization:github:${mess}:${JSON.stringify(content)}',\n            e.origin\n          )\n        }\n        window.addEventListener(\"message\", recieveMessage, false)\n        // Start handshare with parent\n        console.log(\"Sending message: %o\", \"github\")\n        window.opener.postMessage(\"authorizing:github\", \"*\")\n        })()\n      </script>`\n      return res.send(script)\n    })\n  })\n\n  app.get('/success', (req, res) => {\n    res.send('')\n  })\n}\n"]}